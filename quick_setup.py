#!/usr/bin/env python3
"""
Quick Setup Script for Suna
T·ª± ƒë·ªông c√†i ƒë·∫∑t v√† c·∫•u h√¨nh Suna v·ªõi API keys c√≥ s·∫µn
"""
import os
import subprocess
import sys
import shutil
from pathlib import Path

# API Keys - Thay th·∫ø b·∫±ng keys th·∫≠t c·ªßa b·∫°n
API_KEYS = {
    'ENCRYPTION_KEY': 'Wg9QjA-8IwjWutsgFjoW5tgf77UiHELTEvppzCEgmhc=',
    # Supabase (Required)
    "SUPABASE_URL": "https://hrgtaavhrqyjgeniqkjh.supabase.co",
    "SUPABASE_ANON_KEY": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyZ3RhYXZocnF5amdlbmlxa2poIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM2MTA3NDIsImV4cCI6MjA2OTE4Njc0Mn0.hymH7D9YvSBCoMmbPWLvYaowHj1R2ARoIfOlmMkj-2o",
    "SUPABASE_SERVICE_ROLE_KEY": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhyZ3RhYXZocnF5amdlbmlxa2poIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzYxMDc0MiwiZXhwIjoyMDY5MTg2NzQyfQ.cbFDeu_59P144qnCtX9cfty6QFe_28j7mfxUkmFDl30",
    
    # AI Services
    "DAYTONA_API_KEY": "dtn_6d89b45115be2b936ba576bc4d632024bc6b9e0cc818712724904447ec463bdc",
    "MORPH_API_KEY": "sk-A7JwiFcalpLwNsaiwNY4vi60ysSgzgHQeCwbxwXynp2jhH-9",
    
    # Search & Scraping
    "TAVILY_API_KEY": "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",
    "FIRECRAWL_API_KEY": "fc-5baae9da61f944159adc0ef085f38161",
    
    # Background Jobs
    "QSTASH_URL": "https://qstash.upstash.io",
    "QSTASH_TOKEN": "eyJVc2VySUQiOiI5YWNiZjc4NS1mOGYxLTQ0YTQtYWZjOC1hYjA1N2Q5MzBiZjkiLCJQYXNzd29yZCI6IjNjYTE2OTE3NjVhODQ5NTRiNjM3YTc2M2E2NGRiMTc3In0=",
    "QSTASH_CURRENT_SIGNING_KEY": "sig_5RAHirfXnUV4RSoWpKVL4em4GycQ",
    "QSTASH_NEXT_SIGNING_KEY": "sig_7q2Z2cWdV6Yu6yugaZYYerTjjM4K",
    
    # Tunneling
    "NGROK_AUTHTOKEN": "30SZigwTcVVKPWUMrx0JgbUlnbZ_5xHjoS1ZSpqX7fGLXH7up",
}

def run_command(cmd, cwd=None, show_output=True):
    """Ch·∫°y command v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
    if show_output:
        print(f"üîÑ {cmd}")
    
    try:
        result = subprocess.run(
            cmd, shell=True, cwd=cwd, check=True,
            capture_output=not show_output, text=True
        )
        return True, result.stdout if not show_output else ""
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói: {e}")
        return False, e.stderr if hasattr(e, 'stderr') else str(e)

def create_env_files():
    """T·∫°o c√°c file environment v·ªõi API keys"""
    print("üìù T·∫°o file c·∫•u h√¨nh...")
    
    # T·∫°o .env cho backend
    env_content = f"""# Suna Configuration - Auto Generated
NODE_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000
API_URL=http://localhost:8000

# Supabase Configuration
SUPABASE_URL={API_KEYS['SUPABASE_URL']}
SUPABASE_ANON_KEY={API_KEYS['SUPABASE_ANON_KEY']}
SUPABASE_SERVICE_ROLE_KEY={API_KEYS['SUPABASE_SERVICE_ROLE_KEY']}

# AI Services
DAYTONA_API_KEY={API_KEYS['DAYTONA_API_KEY']}
MORPH_API_KEY={API_KEYS['MORPH_API_KEY']}

# Search and Crawling
TAVILY_API_KEY={API_KEYS['TAVILY_API_KEY']}
FIRECRAWL_API_KEY={API_KEYS['FIRECRAWL_API_KEY']}

# Background Jobs
QSTASH_URL={API_KEYS['QSTASH_URL']}
QSTASH_TOKEN={API_KEYS['QSTASH_TOKEN']}
QSTASH_CURRENT_SIGNING_KEY={API_KEYS['QSTASH_CURRENT_SIGNING_KEY']}
QSTASH_NEXT_SIGNING_KEY={API_KEYS['QSTASH_NEXT_SIGNING_KEY']}

# Tunneling
NGROK_AUTHTOKEN={API_KEYS['NGROK_AUTHTOKEN']}

# Redis
REDIS_URL=redis://localhost:6379
REDIS_HOST=localhost
REDIS_PORT=6379
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    # T·∫°o .env.local cho frontend
    frontend_env = f"""# Frontend Configuration - Auto Generated
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_SUPABASE_URL={API_KEYS['SUPABASE_URL']}
NEXT_PUBLIC_SUPABASE_ANON_KEY={API_KEYS['SUPABASE_ANON_KEY']}
"""
    
    with open("frontend/.env.local", "w") as f:
        f.write(frontend_env)
    
    print("‚úÖ ƒê√£ t·∫°o file c·∫•u h√¨nh")

def install_dependencies():
    """C√†i ƒë·∫∑t dependencies"""
    print("üì¶ C√†i ƒë·∫∑t dependencies...")
    
    # Backend
    print("üîß Backend dependencies...")
    success, _ = run_command("pip install uv", cwd="backend", show_output=False)
    if not success:
        return False
    
    success, _ = run_command("uv sync", cwd="backend")
    if not success:
        return False
    
    # Frontend
    print("üåê Frontend dependencies...")
    success, _ = run_command("npm install", cwd="frontend")
    if not success:
        return False
    
    return True

def setup_redis():
    """C√†i ƒë·∫∑t v√† kh·ªüi ch·∫°y Redis"""
    print("üì¶ C√†i ƒë·∫∑t Redis...")
    
    # Ki·ªÉm tra xem Redis ƒë√£ ƒë∆∞·ª£c c√†i ch∆∞a
    success, _ = run_command("which redis-server", show_output=False)
    if not success:
        print("üîÑ C√†i ƒë·∫∑t Redis...")
        success, _ = run_command("apt-get update && apt-get install -y redis-server")
        if not success:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Redis, b·ªè qua...")
            return False
    
    # Kh·ªüi ch·∫°y Redis
    print("üöÄ Kh·ªüi ch·∫°y Redis...")
    success, _ = run_command("redis-server --daemonize yes", show_output=False)
    return success

def main():
    print("""
üöÄ SUNA QUICK SETUP
===================
T·ª± ƒë·ªông c√†i ƒë·∫∑t Suna v·ªõi API keys c√≥ s·∫µn
""")
    
    # Ki·ªÉm tra th∆∞ m·ª•c
    if not Path("backend").exists() or not Path("frontend").exists():
        print("‚ùå Vui l√≤ng ch·∫°y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa Suna")
        sys.exit(1)
    
    # T·∫°o file c·∫•u h√¨nh
    create_env_files()
    
    # C√†i ƒë·∫∑t dependencies
    if not install_dependencies():
        print("‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t dependencies")
        sys.exit(1)
    
    # Setup Redis
    setup_redis()
    
    print("""
‚úÖ C√ÄI ƒê·∫∂T HO√ÄN T·∫§T!
===================

üöÄ Kh·ªüi ch·∫°y services:
python start_services.py

üåê Ho·∫∑c kh·ªüi ch·∫°y th·ªß c√¥ng:
1. Backend: cd backend && uv run uvicorn api:app --host 0.0.0.0 --port 8000
2. Frontend: cd frontend && npm run dev -- --port 3000

üìã Logs s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i:
- /tmp/backend.log
- /tmp/frontend.log
- /tmp/redis.log
""")

if __name__ == "__main__":
    main()